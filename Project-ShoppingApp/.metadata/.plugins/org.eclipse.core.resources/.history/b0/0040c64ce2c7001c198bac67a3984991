package passwordencryption;

import java.security.SecureRandom;
import java.util.Random;

public class EncryptPassword {
    private static final Random random = new SecureRandom();  
    private static final String characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";  
    private static final int iterations = 10000;  
    private static final int keylength = 256;  
	 public static String getSaltvalue(int length)   
	    {  
	        StringBuilder finalval = new StringBuilder(length);  
	  
	        for (int i = 0; i < length; i++)   
	        {  
	            finalvalue.append(characters.charAt(random.nextInt(characters.length())));  
	        }  
	  
	        return new String(finalval);  
	    }     
	  
	    /* Method to generate the hash value */  
	    public static byte[] hash(char[] password, byte[] salt)   
	    {  
	        PBEKeySpec spec = new PBEKeySpec(password, salt, iterations, keylength);  
	        Arrays.fill(password, Character.MIN_VALUE);  
	        try   
	        {  
	            SecretKeyFactory skf = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");  
	            return skf.generateSecret(spec).getEncoded();  
	        }   
	        catch (NoSuchAlgorithmException | InvalidKeySpecException e)   
	        {  
	            throw new AssertionError("Error while hashing a password: " + e.getMessage(), e);  
	        }   
	        finally   
	        {  
	            spec.clearPassword();  
	        }  
	    }  
	 public static String generateSecurePassword(String password, String salt)   
	    {  
	        String finalvalue = null;  
	  
	        byte[] securePassword = hash(password.toCharArray(), salt.getBytes());  
	   
	        finalvalue = Base64.getEncoder().encodeToString(securePassword);  
	   
	        return finalvalue;  
	    }  
}
